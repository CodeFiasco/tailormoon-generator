{"version":3,"sources":["photo-booth.jsx","face-swap.jsx","app.js","index.js"],"names":["Video","styled","video","Canvas","canvas","PhotoBooth","onLoad","videoRef","useRef","canvasRef","useState","webcam","setWebcam","useEffect","initialized","Webcam","current","a","start","stop","ref","autoPlay","playsinline","className","onClick","photo","snap","image","Image","src","onload","Loader","Container","div","FaceSwap","faces","setInitialized","containerRef","Promise","all","faceapi","faceRecognitionNet","loadFromUri","faceLandmark68Net","ssdMobilenetv1","width","height","context","getContext","sailorMoon","withFaceLandmarks","withFaceDescriptors","detections","box","detection","drawImage","topLeft","x","y","append","App","setFaces","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"siBAIA,IAAMA,EAAQC,IAAOC,MAAV,KAKLC,EAASF,IAAOG,OAAV,KA6CGC,MAzCf,YAAiC,IAAXC,EAAU,EAAVA,OACZC,EAAWC,iBAAO,MAClBC,EAAYD,iBAAO,MAFG,EAGAE,mBAAS,MAHT,mBAGrBC,EAHqB,KAGbC,EAHa,KAgC5B,OA3BAC,qBAAU,WACN,IAAIC,GAAc,EACZH,EAAS,IAAII,IAAOR,EAASS,QAAS,OAAQP,EAAUO,SAQ9D,OAPAJ,EAAUD,GAEV,sBAAC,sBAAAM,EAAA,sEACSN,EAAOO,QADhB,OAEGJ,GAAc,EAFjB,0CAAD,GAKO,WACCA,GACAH,EAAOQ,UAGhB,IAaC,oCACI,kBAACnB,EAAD,CAAOoB,IAAKb,EAAUc,UAAQ,EAACC,aAAW,IAC1C,kBAACnB,EAAD,CAAQoB,UAAU,SAASH,IAAKX,IAC/BE,GAAU,4BAAQa,QAd3B,WACI,IAAMC,EAAQd,EAAOe,OACfC,EAAQ,IAAIC,MAClBD,EAAME,IAAMJ,EAEZE,EAAMG,OAAS,WACXxB,EAAOqB,MAQI,U,8gBC7CvB,IAAMI,EAAS9B,IAAOG,OAAV,KAgBN4B,EAAY/B,IAAOgC,IAAV,KAsEAC,MApEf,YAA8B,IAAVC,EAAS,EAATA,MAAS,EACazB,oBAAS,GADtB,mBAClBI,EADkB,KACLsB,EADK,KAEnBC,EAAe7B,iBAAO,MA+D5B,OA7DAK,qBAAU,WACN,sBAAC,sBAAAI,EAAA,sEACSqB,QAAQC,IAAI,CACdC,IAAaC,mBAAmBC,YAAY,WAC5CF,IAAaG,kBAAkBD,YAAY,WAC3CF,IAAaI,eAAeF,YAAY,aAJ/C,OAOGN,GAAe,GAPlB,0CAAD,KASD,IAEHvB,qBAAU,WACN,GAAKC,EAAL,CAIA,IAAMV,EAASoC,IAA8BL,GAC7CK,IAAwBpC,EAAQ,CAAEyC,MAAO,IAAKC,OAAQ,MAEtD,IAAMC,EAAU3C,EAAO4C,WAAW,MAE5BC,EAAa,IAAIrB,MACvBqB,EAAWpB,IAAM,mBAEjBoB,EAAWnB,OAAX,sBAAoB,8BAAAb,EAAA,sEACSuB,IACLL,GACfe,oBACAC,sBAJW,OACVC,EADU,OAMRC,EAAQD,EAAW,GAAGE,UAAtBD,IAERN,EAAQQ,UACJpB,EACAkB,EAAIG,QAAQC,EACZJ,EAAIG,QAAQE,EACZL,EAAIR,MACJQ,EAAIP,OACJ,IACA,GACA,IACA,KAGJC,EAAQQ,UACJN,EACA,EACA,EACAA,EAAWJ,MACXI,EAAWH,OACX,EACA,EACAG,EAAWJ,MACXI,EAAWH,QAGfT,EAAarB,QAAQ2C,OAAOvD,GAhCZ,8CAkCrB,CAAC+B,EAAOrB,IAEJA,EAAc,kBAACkB,EAAD,CAAWZ,IAAKiB,IAAmB,kBAACN,EAAD,OC7E7C6B,MANf,WAAgB,IAAD,EACelD,mBAAS,MADxB,mBACJyB,EADI,KACG0B,EADH,KAGX,OAAO1B,EAAQ,kBAAC,EAAD,CAAUA,MAAOA,IAAY,kBAAC,EAAD,CAAY7B,OAAQuD,KCFpEC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.44aa37e9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Webcam from 'webcam-easy';\n\nconst Video = styled.video`\n    width: 640px;\n    height: 480px;\n`;\n\nconst Canvas = styled.canvas`\n    display: none;\n`;\n\nfunction PhotoBooth({ onLoad }) {\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const [webcam, setWebcam] = useState(null);\n\n    useEffect(() => {\n        let initialized = false;\n        const webcam = new Webcam(videoRef.current, 'user', canvasRef.current);\n        setWebcam(webcam);\n\n        (async function () {\n            await webcam.start();\n            initialized = true;\n        })();\n\n        return () => {\n            if (initialized) {\n                webcam.stop();\n            }\n        };\n    }, []);\n\n    function takePhoto() {\n        const photo = webcam.snap();\n        const image = new Image();\n        image.src = photo;\n\n        image.onload = () => {\n            onLoad(image);\n        };\n    }\n\n    return (\n        <>\n            <Video ref={videoRef} autoPlay playsinline />\n            <Canvas className=\"d-none\" ref={canvasRef} />\n            {webcam && <button onClick={takePhoto}>Snap</button>}\n        </>\n    );\n}\n\nexport default PhotoBooth;\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as faceapi from 'face-api.js';\n\nconst Loader = styled.canvas`\n    color: #ffffff;\n    font-size: 20px;\n    margin: 100px auto;\n    width: 1em;\n    height: 1em;\n    border-radius: 50%;\n    position: relative;\n    text-indent: -9999em;\n    -webkit-animation: load 1.3s infinite linear;\n    animation: load 1.3s infinite linear;\n    -webkit-transform: translateZ(0);\n    -ms-transform: translateZ(0);\n    transform: translateZ(0);\n`;\n\nconst Container = styled.div``;\n\nfunction FaceSwap({ faces }) {\n    const [initialized, setInitialized] = useState(false);\n    const containerRef = useRef(null);\n\n    useEffect(() => {\n        (async function () {\n            await Promise.all([\n                faceapi.nets.faceRecognitionNet.loadFromUri('/models'),\n                faceapi.nets.faceLandmark68Net.loadFromUri('/models'),\n                faceapi.nets.ssdMobilenetv1.loadFromUri('/models')\n            ]);\n\n            setInitialized(true);\n        })();\n    }, []);\n\n    useEffect(() => {\n        if (!initialized) {\n            return;\n        }\n\n        const canvas = faceapi.createCanvasFromMedia(faces);\n        faceapi.matchDimensions(canvas, { width: 770, height: 443 });\n\n        const context = canvas.getContext('2d');\n\n        const sailorMoon = new Image();\n        sailorMoon.src = '/sailor-moon.png';\n\n        sailorMoon.onload = async () => {\n            const detections = await faceapi\n                .detectAllFaces(faces)\n                .withFaceLandmarks()\n                .withFaceDescriptors();\n\n            const { box } = detections[0].detection;\n\n            context.drawImage(\n                faces,\n                box.topLeft.x,\n                box.topLeft.y,\n                box.width,\n                box.height,\n                330,\n                85,\n                160,\n                160\n            );\n\n            context.drawImage(\n                sailorMoon,\n                0,\n                0,\n                sailorMoon.width,\n                sailorMoon.height,\n                0,\n                0,\n                sailorMoon.width,\n                sailorMoon.height\n            );\n\n            containerRef.current.append(canvas);\n        };\n    }, [faces, initialized]);\n\n    return initialized ? <Container ref={containerRef} /> : <Loader />;\n}\n\nexport default FaceSwap;\n","import React, { useState } from 'react';\nimport PhotoBooth from './photo-booth';\nimport FaceSwap from './face-swap';\n\nfunction App() {\n    const [faces, setFaces] = useState(null);\n\n    return faces ? <FaceSwap faces={faces} /> : <PhotoBooth onLoad={setFaces} />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}