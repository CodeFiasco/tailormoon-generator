{"version":3,"sources":["button.jsx","photo-booth.jsx","face-swap.jsx","app.js","index.js"],"names":["Button","styled","div","Video","video","Container","Canvas","canvas","PhotoBooth","onLoad","videoRef","useRef","canvasRef","useState","webcam","setWebcam","useEffect","initialized","Webcam","current","a","start","stop","ref","autoPlay","playsinline","className","onClick","photo","snap","image","Image","src","onload","Loader","h1","FaceSwap","faces","setInitialized","containerRef","Promise","all","faceapi","faceRecognitionNet","loadFromUri","faceLandmark68Net","ssdMobilenetv1","width","height","context","getContext","sailorMoon","title","withFaceLandmarks","withFaceDescriptors","detections","box","detection","drawImage","topLeft","x","y","append","App","setFaces","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2iCAEA,IA0BeA,EA1BAC,IAAOC,IAAV,K,+XCGZ,IAAMC,EAAQF,IAAOG,MAAV,KAMLC,EAAYJ,IAAOC,IAAV,KAOTI,EAASL,IAAOM,OAAV,KA6CGC,MAzCf,YAAiC,IAAXC,EAAU,EAAVA,OACZC,EAAWC,iBAAO,MAClBC,EAAYD,iBAAO,MAFG,EAGAE,mBAAS,MAHT,mBAGrBC,EAHqB,KAGbC,EAHa,KAgC5B,OA3BAC,qBAAU,WACN,IAAIC,GAAc,EACZH,EAAS,IAAII,IAAOR,EAASS,QAAS,OAAQP,EAAUO,SAQ9D,OAPAJ,EAAUD,GAEV,sBAAC,sBAAAM,EAAA,sEACSN,EAAOO,QADhB,OAEGJ,GAAc,EAFjB,0CAAD,GAKO,WACCA,GACAH,EAAOQ,UAGhB,IAaC,kBAACjB,EAAD,KACI,kBAACF,EAAD,CAAOoB,IAAKb,EAAUc,UAAQ,EAACC,aAAW,IAC1C,kBAACnB,EAAD,CAAQoB,UAAU,SAASH,IAAKX,IAC/BE,GAAU,kBAAC,EAAD,CAAQa,QAd3B,WACI,IAAMC,EAAQd,EAAOe,OACfC,EAAQ,IAAIC,MAClBD,EAAME,IAAMJ,EAEZE,EAAMG,OAAS,WACXxB,EAAOqB,MAQI,mC,4KCtDvB,IAAMzB,EAAYJ,IAAOC,IAAV,KAETgC,EAASjC,IAAOkC,GAAV,KAgFGC,MA5Ef,YAA8B,IAAVC,EAAS,EAATA,MAAS,EACaxB,oBAAS,GADtB,mBAClBI,EADkB,KACLqB,EADK,KAEnBC,EAAe5B,iBAAO,MAuE5B,OArEAK,qBAAU,WACN,sBAAC,sBAAAI,EAAA,sEACSoB,QAAQC,IAAI,CACdC,IAAaC,mBAAmBC,YAAY,WAC5CF,IAAaG,kBAAkBD,YAAY,WAC3CF,IAAaI,eAAeF,YAAY,aAJ/C,OAOGN,GAAe,GAPlB,0CAAD,KASD,IAEHtB,qBAAU,WACN,GAAKC,EAAL,CAIA,IAAMV,EAASmC,IAA8BL,GAC7CK,IAAwBnC,EAAQ,CAAEwC,MAAO,IAAKC,OAAQ,MAEtD,IAAMC,EAAU1C,EAAO2C,WAAW,MAE5BC,EAAa,IAAIpB,MACvBoB,EAAWnB,IAAM,mBAEjB,IAAMoB,EAAQ,IAAIrB,MAElBoB,EAAWlB,OAAX,sBAAoB,sBAAAb,EAAA,sDAChBgC,EAAMpB,IAAM,aAEZoB,EAAMnB,OAAN,sBAAe,8BAAAb,EAAA,sEACcsB,IACLL,GACfgB,oBACAC,sBAJM,OACLC,EADK,OAMHC,EAAQD,EAAW,GAAGE,UAAtBD,IAERP,EAAQS,UACJrB,EACAmB,EAAIG,QAAQC,EACZJ,EAAIG,QAAQE,EACZL,EAAIT,MACJS,EAAIR,OACJ,IACA,GACA,IACA,KAGJC,EAAQS,UACJP,EACA,EACA,EACAA,EAAWJ,MACXI,EAAWH,OACX,EACA,EACAG,EAAWJ,MACXI,EAAWH,QAGfC,EAAQS,UAAUN,EAAO,EAAGD,EAAWH,OAAS,IAEhDT,EAAapB,QAAQ2C,OAAOvD,GAlCjB,2CAHC,8CAwCrB,CAAC8B,EAAOpB,IAEJA,EAAc,kBAAC,EAAD,CAAWM,IAAKgB,IAAmB,kBAACL,EAAD,iBCzE7C6B,MANf,WAAgB,IAAD,EACelD,mBAAS,MADxB,mBACJwB,EADI,KACG2B,EADH,KAGX,OAAO3B,EAAQ,kBAAC,EAAD,CAAUA,MAAOA,IAAY,kBAAC,EAAD,CAAY5B,OAAQuD,KCFpEC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.ec6a998b.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Button = styled.div`\n    box-shadow: inset 0px 1px 0px 0px #97c4fe;\n    background: linear-gradient(to bottom, #3d94f6 5%, #1e62d0 100%);\n    background-color: #3d94f6;\n    border-radius: 6px;\n    border: 1px solid #337fed;\n    display: inline-block;\n    cursor: pointer;\n    color: #ffffff;\n    font-family: Arial;\n    font-size: 15px;\n    font-weight: bold;\n    padding: 6px 24px;\n    text-decoration: none;\n    text-shadow: 0px 1px 0px #1570cd;\n\n    &:hover {\n        background: linear-gradient(to bottom, #1e62d0 5%, #3d94f6 100%);\n        background-color: #1e62d0;\n    }\n    &:active {\n        position: relative;\n        top: 1px;\n    }\n`;\n\nexport default Button;\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Webcam from 'webcam-easy';\nimport Button from './button';\n\nconst Video = styled.video`\n    width: 100%;\n    height: 440px;\n    margin-bottom: 10px;\n`;\n\nconst Container = styled.div`\n    width: 640px;\n    height: 480px;\n    max-width: 100%;\n    text-align: center;\n`;\n\nconst Canvas = styled.canvas`\n    display: none;\n`;\n\nfunction PhotoBooth({ onLoad }) {\n    const videoRef = useRef(null);\n    const canvasRef = useRef(null);\n    const [webcam, setWebcam] = useState(null);\n\n    useEffect(() => {\n        let initialized = false;\n        const webcam = new Webcam(videoRef.current, 'user', canvasRef.current);\n        setWebcam(webcam);\n\n        (async function () {\n            await webcam.start();\n            initialized = true;\n        })();\n\n        return () => {\n            if (initialized) {\n                webcam.stop();\n            }\n        };\n    }, []);\n\n    function takePhoto() {\n        const photo = webcam.snap();\n        const image = new Image();\n        image.src = photo;\n\n        image.onload = () => {\n            onLoad(image);\n        };\n    }\n\n    return (\n        <Container>\n            <Video ref={videoRef} autoPlay playsinline />\n            <Canvas className=\"d-none\" ref={canvasRef} />\n            {webcam && <Button onClick={takePhoto}>I want to be a &lt;TAILor moon_&gt;</Button>}\n        </Container>\n    );\n}\n\nexport default PhotoBooth;\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as faceapi from 'face-api.js';\n\nconst Container = styled.div``;\n\nconst Loader = styled.h1`\n    text-align: center;\n`;\n\nfunction FaceSwap({ faces }) {\n    const [initialized, setInitialized] = useState(false);\n    const containerRef = useRef(null);\n\n    useEffect(() => {\n        (async function () {\n            await Promise.all([\n                faceapi.nets.faceRecognitionNet.loadFromUri('/models'),\n                faceapi.nets.faceLandmark68Net.loadFromUri('/models'),\n                faceapi.nets.ssdMobilenetv1.loadFromUri('/models')\n            ]);\n\n            setInitialized(true);\n        })();\n    }, []);\n\n    useEffect(() => {\n        if (!initialized) {\n            return;\n        }\n\n        const canvas = faceapi.createCanvasFromMedia(faces);\n        faceapi.matchDimensions(canvas, { width: 770, height: 443 });\n\n        const context = canvas.getContext('2d');\n\n        const sailorMoon = new Image();\n        sailorMoon.src = '/sailor-moon.png';\n\n        const title = new Image();\n\n        sailorMoon.onload = async () => {\n            title.src = '/title.png';\n\n            title.onload = async () => {\n                const detections = await faceapi\n                    .detectAllFaces(faces)\n                    .withFaceLandmarks()\n                    .withFaceDescriptors();\n\n                const { box } = detections[0].detection;\n\n                context.drawImage(\n                    faces,\n                    box.topLeft.x,\n                    box.topLeft.y,\n                    box.width,\n                    box.height,\n                    330,\n                    85,\n                    160,\n                    160\n                );\n\n                context.drawImage(\n                    sailorMoon,\n                    0,\n                    0,\n                    sailorMoon.width,\n                    sailorMoon.height,\n                    0,\n                    0,\n                    sailorMoon.width,\n                    sailorMoon.height\n                );\n\n                context.drawImage(title, 0, sailorMoon.height - 62);\n\n                containerRef.current.append(canvas);\n            };\n        };\n    }, [faces, initialized]);\n\n    return initialized ? <Container ref={containerRef} /> : <Loader>Loading</Loader>;\n}\n\nexport default FaceSwap;\n","import React, { useState } from 'react';\nimport PhotoBooth from './photo-booth';\nimport FaceSwap from './face-swap';\n\nfunction App() {\n    const [faces, setFaces] = useState(null);\n\n    return faces ? <FaceSwap faces={faces} /> : <PhotoBooth onLoad={setFaces} />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}